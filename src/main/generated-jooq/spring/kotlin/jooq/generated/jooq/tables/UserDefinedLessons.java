/*
 * This file is generated by jOOQ.
 */
package spring.kotlin.jooq.generated.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import spring.kotlin.jooq.generated.jooq.DefaultSchema;
import spring.kotlin.jooq.generated.jooq.Indexes;
import spring.kotlin.jooq.generated.jooq.Keys;
import spring.kotlin.jooq.generated.jooq.tables.records.UserDefinedLessonsRecord;


/**
 * User Defined Lessons
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserDefinedLessons extends TableImpl<UserDefinedLessonsRecord> {

    private static final long serialVersionUID = -601056912;

    /**
     * The reference instance of <code>user_defined_lessons</code>
     */
    public static final UserDefinedLessons USER_DEFINED_LESSONS = new UserDefinedLessons();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserDefinedLessonsRecord> getRecordType() {
        return UserDefinedLessonsRecord.class;
    }

    /**
     * The column <code>user_defined_lessons.id</code>. id
     */
    public final TableField<UserDefinedLessonsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "id");

    /**
     * The column <code>user_defined_lessons.user_id</code>. ユーザーid
     */
    public final TableField<UserDefinedLessonsRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "ユーザーid");

    /**
     * The column <code>user_defined_lessons.title</code>. タイトル
     */
    public final TableField<UserDefinedLessonsRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "タイトル");

    /**
     * The column <code>user_defined_lessons.description</code>. 説明
     */
    public final TableField<UserDefinedLessonsRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "説明");

    /**
     * The column <code>user_defined_lessons.create_time</code>.
     */
    public final TableField<UserDefinedLessonsRecord, LocalDateTime> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>user_defined_lessons.update_time</code>.
     */
    public final TableField<UserDefinedLessonsRecord, LocalDateTime> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>user_defined_lessons</code> table reference
     */
    public UserDefinedLessons() {
        this(DSL.name("user_defined_lessons"), null);
    }

    /**
     * Create an aliased <code>user_defined_lessons</code> table reference
     */
    public UserDefinedLessons(String alias) {
        this(DSL.name(alias), USER_DEFINED_LESSONS);
    }

    /**
     * Create an aliased <code>user_defined_lessons</code> table reference
     */
    public UserDefinedLessons(Name alias) {
        this(alias, USER_DEFINED_LESSONS);
    }

    private UserDefinedLessons(Name alias, Table<UserDefinedLessonsRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserDefinedLessons(Name alias, Table<UserDefinedLessonsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("User Defined Lessons"));
    }

    public <O extends Record> UserDefinedLessons(Table<O> child, ForeignKey<O, UserDefinedLessonsRecord> key) {
        super(child, key, USER_DEFINED_LESSONS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USER_DEFINED_LESSONS_FK_USER_ID, Indexes.USER_DEFINED_LESSONS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<UserDefinedLessonsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_USER_DEFINED_LESSONS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UserDefinedLessonsRecord> getPrimaryKey() {
        return Keys.KEY_USER_DEFINED_LESSONS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserDefinedLessonsRecord>> getKeys() {
        return Arrays.<UniqueKey<UserDefinedLessonsRecord>>asList(Keys.KEY_USER_DEFINED_LESSONS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<UserDefinedLessonsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserDefinedLessonsRecord, ?>>asList(Keys.FK_USER_ID);
    }

    public Users users() {
        return new Users(this, Keys.FK_USER_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserDefinedLessons as(String alias) {
        return new UserDefinedLessons(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserDefinedLessons as(Name alias) {
        return new UserDefinedLessons(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserDefinedLessons rename(String name) {
        return new UserDefinedLessons(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserDefinedLessons rename(Name name) {
        return new UserDefinedLessons(name, null);
    }
}
