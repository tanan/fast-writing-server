/*
 * This file is generated by jOOQ.
 */
package spring.kotlin.jooq.generated.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import spring.kotlin.jooq.generated.jooq.DefaultSchema;
import spring.kotlin.jooq.generated.jooq.Indexes;
import spring.kotlin.jooq.generated.jooq.Keys;
import spring.kotlin.jooq.generated.jooq.tables.records.ContentsRecord;


/**
 * Lesson Contents
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Contents extends TableImpl<ContentsRecord> {

    private static final long serialVersionUID = -239344508;

    /**
     * The reference instance of <code>contents</code>
     */
    public static final Contents CONTENTS = new Contents();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ContentsRecord> getRecordType() {
        return ContentsRecord.class;
    }

    /**
     * The column <code>contents.id</code>. id
     */
    public final TableField<ContentsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "id");

    /**
     * The column <code>contents.lesson_id</code>. lesson id
     */
    public final TableField<ContentsRecord, Integer> LESSON_ID = createField("lesson_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "lesson id");

    /**
     * The column <code>contents.jp_text</code>. japanese text
     */
    public final TableField<ContentsRecord, String> JP_TEXT = createField("jp_text", org.jooq.impl.SQLDataType.VARCHAR(512).nullable(false), this, "japanese text");

    /**
     * The column <code>contents.en_text</code>. english text
     */
    public final TableField<ContentsRecord, String> EN_TEXT = createField("en_text", org.jooq.impl.SQLDataType.VARCHAR(512).nullable(false), this, "english text");

    /**
     * Create a <code>contents</code> table reference
     */
    public Contents() {
        this(DSL.name("contents"), null);
    }

    /**
     * Create an aliased <code>contents</code> table reference
     */
    public Contents(String alias) {
        this(DSL.name(alias), CONTENTS);
    }

    /**
     * Create an aliased <code>contents</code> table reference
     */
    public Contents(Name alias) {
        this(alias, CONTENTS);
    }

    private Contents(Name alias, Table<ContentsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Contents(Name alias, Table<ContentsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Lesson Contents"));
    }

    public <O extends Record> Contents(Table<O> child, ForeignKey<O, ContentsRecord> key) {
        super(child, key, CONTENTS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CONTENTS_FK_LESSON_ID, Indexes.CONTENTS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ContentsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CONTENTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ContentsRecord> getPrimaryKey() {
        return Keys.KEY_CONTENTS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ContentsRecord>> getKeys() {
        return Arrays.<UniqueKey<ContentsRecord>>asList(Keys.KEY_CONTENTS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ContentsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ContentsRecord, ?>>asList(Keys.FK_LESSON_ID);
    }

    public Lessons lessons() {
        return new Lessons(this, Keys.FK_LESSON_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Contents as(String alias) {
        return new Contents(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Contents as(Name alias) {
        return new Contents(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Contents rename(String name) {
        return new Contents(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Contents rename(Name name) {
        return new Contents(name, null);
    }
}
